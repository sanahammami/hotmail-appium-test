"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadFile = uploadFile;
exports.downloadFile = downloadFile;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _fs = _interopRequireDefault(require("./fs"));

var _url = _interopRequireDefault(require("url"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

var _logger = _interopRequireDefault(require("./logger"));

var _jsftp = _interopRequireDefault(require("jsftp"));

var _timing = _interopRequireDefault(require("./timing"));

var _axios = _interopRequireDefault(require("axios"));

var _formData = _interopRequireDefault(require("form-data"));

function toAxiosAuth(auth) {
  if (!_lodash.default.isPlainObject(auth)) {
    return null;
  }

  const axiosAuth = {
    username: auth.username || auth.user,
    password: auth.password || auth.pass
  };
  return axiosAuth.username && axiosAuth.password ? axiosAuth : null;
}

async function uploadFileToHttp(localFileStream, parsedUri, uploadOptions = {}) {
  const {
    method = 'POST',
    timeout = 5000,
    headers,
    auth,
    fileFieldName = 'file',
    formFields
  } = uploadOptions;
  const {
    protocol,
    href
  } = parsedUri;
  const requestOpts = {
    url: href,
    method,
    timeout
  };
  const axiosAuth = toAxiosAuth(auth);

  if (axiosAuth) {
    requestOpts.auth = axiosAuth;
  }

  const form = new _formData.default();
  form.append(fileFieldName, localFileStream);

  if (formFields) {
    let pairs = [];

    if (_lodash.default.isArray(formFields)) {
      pairs = formFields;
    } else if (_lodash.default.isPlainObject(formFields)) {
      pairs = _lodash.default.toPairs(formFields);
    }

    for (const [key, value] of pairs) {
      if (_lodash.default.toLower(key) !== _lodash.default.toLower(fileFieldName)) {
        form.append(key, value);
      }
    }
  }

  requestOpts.data = form;
  requestOpts.headers = Object.assign({}, _lodash.default.isPlainObject(headers) ? headers : {}, form.getHeaders());

  _logger.default.debug(`${protocol} upload options: ${JSON.stringify(requestOpts)}`);

  await (0, _axios.default)(requestOpts);
}

async function uploadFileToFtp(localFileStream, parsedUri, uploadOptions = {}) {
  const {
    auth,
    user,
    pass
  } = uploadOptions;
  const {
    hostname,
    port,
    protocol,
    pathname
  } = parsedUri;
  const ftpOpts = {
    host: hostname,
    port: port || 21
  };

  if ((auth === null || auth === void 0 ? void 0 : auth.user) && (auth === null || auth === void 0 ? void 0 : auth.pass) || user && pass) {
    ftpOpts.user = (auth === null || auth === void 0 ? void 0 : auth.user) || user;
    ftpOpts.pass = (auth === null || auth === void 0 ? void 0 : auth.pass) || pass;
  }

  _logger.default.debug(`${protocol} upload options: ${JSON.stringify(ftpOpts)}`);

  return await new _bluebird.default((resolve, reject) => {
    new _jsftp.default(ftpOpts).put(localFileStream, pathname, err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

async function uploadFile(localPath, remoteUri, uploadOptions = {}) {
  if (!(await _fs.default.exists(localPath))) {
    throw new Error(`'${localPath}' does not exists or is not accessible`);
  }

  const {
    isMetered = true
  } = uploadOptions;

  const parsedUri = _url.default.parse(remoteUri);

  const {
    size
  } = await _fs.default.stat(localPath);

  if (isMetered) {
    _logger.default.info(`Uploading '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size to '${remoteUri}'...`);
  }

  const timer = new _timing.default().start();

  if (['http:', 'https:'].includes(parsedUri.protocol)) {
    await uploadFileToHttp(_fs.default.createReadStream(localPath), parsedUri, uploadOptions);
  } else if (parsedUri.protocol === 'ftp:') {
    await uploadFileToFtp(_fs.default.createReadStream(localPath), parsedUri, uploadOptions);
  } else {
    throw new Error(`Cannot upload the file at '${localPath}' to '${remoteUri}'. ` + `Unsupported remote protocol '${parsedUri.protocol}'. ` + `Only http/https and ftp/ftps protocols are supported.`);
  }

  if (isMetered) {
    _logger.default.info(`Uploaded '${localPath}' of ${(0, _util.toReadableSizeString)(size)} size in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
}

async function downloadFile(remoteUrl, dstPath, downloadOptions = {}) {
  const {
    isMetered = true,
    auth,
    timeout = 5000,
    headers
  } = downloadOptions;
  const requestOpts = {
    url: remoteUrl,
    responseType: 'stream',
    timeout
  };
  const axiosAuth = toAxiosAuth(auth);

  if (axiosAuth) {
    requestOpts.auth = axiosAuth;
  }

  if (_lodash.default.isPlainObject(headers)) {
    requestOpts.headers = headers;
  }

  const timer = new _timing.default().start();

  try {
    const writer = _fs.default.createWriteStream(dstPath);

    const responseStream = (await (0, _axios.default)(requestOpts)).data;
    responseStream.pipe(writer);
    await new _bluebird.default((resolve, reject) => {
      responseStream.once('error', reject);
      writer.once('finish', resolve);
      writer.once('error', e => {
        responseStream.unpipe(writer);
        reject(e);
      });
    });
  } catch (err) {
    throw new Error(`Cannot download the file from ${remoteUrl}: ${err.message}`);
  }

  if (!isMetered) {
    return;
  }

  const secondsElapsed = timer.getDuration().asSeconds;
  const {
    size
  } = await _fs.default.stat(dstPath);

  _logger.default.debug(`${remoteUrl} (${(0, _util.toReadableSizeString)(size)}) ` + `has been downloaded to '${dstPath}' in ${secondsElapsed.toFixed(3)}s`);

  if (secondsElapsed >= 2) {
    const bytesPerSec = Math.floor(size / secondsElapsed);

    _logger.default.debug(`Approximate download speed: ${(0, _util.toReadableSizeString)(bytesPerSec)}/s`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
