"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppiumLauncher = void 0;

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _child_process = require("child_process");

var _fsExtra = require("fs-extra");

var _paramCase = _interopRequireDefault(require("param-case"));

var _util = require("util");

var _getFilePath = _interopRequireDefault(require("./utils/getFilePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('@wdio/appium-service');
const DEFAULT_LOG_FILENAME = 'appium.txt';

class AppiumLauncher {
  constructor() {
    this.logPath = null;
    this.command = '';
    this.appiumArgs = [];
  }

  async onPrepare(config) {
    const appiumConfig = config.appium || {};
    this.logPath = appiumConfig.logPath || config.outputDir;

    if (appiumConfig.command) {
      this.command = appiumConfig.command;
    } else {
      this.command = 'node';
      this.appiumArgs.push(this._getAppiumCommand());
    }

    this.appiumArgs.push(...this._cliArgsFromKeyValue(appiumConfig.args || {}));
    const asyncStartAppium = (0, _util.promisify)(this._startAppium);
    this.process = await asyncStartAppium(this.command, this.appiumArgs, this.waitStartTime);

    if (typeof this.logPath === 'string') {
      this._redirectLogStream(this.logPath);
    }
  }

  onComplete() {
    if (this.process) {
      log.debug(`Appium (pid: ${process.pid}) killed`);
      this.process.kill();
    }
  }

  _startAppium(command, args, waitStartTime, callback) {
    log.debug(`Will spawn Appium process: ${command} ${args.join(' ')}`);
    let process = (0, _child_process.spawn)(command, args, {
      stdio: ['ignore', 'pipe', 'pipe']
    });
    let error;
    process.stdout.on('data', data => {
      if (data.includes('Appium REST http interface listener started')) {
        log.debug(`Appium started with ID: ${process.pid}`);
        callback(null, process);
      }
    });
    process.stderr.once('data', err => {
      error = err;
    });
    process.once('exit', exitCode => {
      let errorMessage = `Appium exited before timeout (exit code: ${exitCode})`;

      if (exitCode == 2) {
        errorMessage += '\n' + (error || 'Check that you don\'t already have a running Appium service.');
        log.error(errorMessage);
      }

      callback(new Error(errorMessage), null);
    });
  }

  _redirectLogStream(logPath) {
    const logFile = (0, _getFilePath.default)(logPath, DEFAULT_LOG_FILENAME);
    (0, _fsExtra.ensureFileSync)(logFile);
    log.debug(`Appium logs written to: ${logFile}`);
    const logStream = (0, _fsExtra.createWriteStream)(logFile, {
      flags: 'w'
    });
    this.process.stdout.pipe(logStream);
    this.process.stderr.pipe(logStream);
  }

  _getAppiumCommand(moduleName = 'appium') {
    try {
      return require.resolve(moduleName);
    } catch (err) {
      log.error('appium is not installed locally.\n' + 'If you use globally installed appium please add\n' + "appium: { command: 'appium' }\n" + 'to your wdio.conf.js!');
      throw err;
    }
  }

  _cliArgsFromKeyValue(keyValueArgs) {
    if (Array.isArray(keyValueArgs)) {
      return keyValueArgs;
    }

    const cliArgs = [];

    for (let key in keyValueArgs) {
      const value = keyValueArgs[key];

      if (typeof value === 'boolean' && !value || value === null) {
        continue;
      }

      cliArgs.push(`--${(0, _paramCase.default)(key)}`);

      if (typeof value !== 'boolean' && value !== null) {
        cliArgs.push(this._sanitizeCliOptionValue(value));
      }
    }

    return cliArgs;
  }

  _sanitizeCliOptionValue(value) {
    const valueString = String(value);
    return /\s/.test(valueString) ? `'${valueString}'` : valueString;
  }

}

exports.AppiumLauncher = AppiumLauncher;