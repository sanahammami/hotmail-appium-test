"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.server = server;
exports.configureServer = configureServer;
exports.normalizeBasePath = normalizeBasePath;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _methodOverride = _interopRequireDefault(require("method-override"));

var _logger = _interopRequireDefault(require("./logger"));

var _expressLogging = require("./express-logging");

var _middleware = require("./middleware");

var _static = require("./static");

var _crash = require("./crash");

var _websocket = require("./websocket");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _protocol = require("../protocol");

async function server(opts = {}) {
  const {
    routeConfiguringFunction,
    port,
    hostname = null,
    allowCors = true,
    basePath = _protocol.DEFAULT_BASE_PATH
  } = opts;
  const app = (0, _express.default)();

  let httpServer = _http.default.createServer(app);

  httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
  httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
  httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
  httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;
  const close = httpServer.close.bind(httpServer);

  httpServer.close = async () => {
    return await new _bluebird.default((resolve, reject) => {
      httpServer.on('close', resolve);
      close(err => {
        if (err) reject(err);
      });
    });
  };

  return await new _bluebird.default((resolve, reject) => {
    httpServer.on('error', err => {
      if (err.code === 'EADDRNOTAVAIL') {
        _logger.default.error('Could not start REST http interface listener. ' + 'Requested address is not available.');
      } else {
        _logger.default.error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
      }

      reject(err);
    });
    httpServer.on('connection', socket => {
      socket.setTimeout(600 * 1000);
      socket.on('error', reject);
    });
    configureServer(app, routeConfiguringFunction, allowCors, basePath);
    let serverArgs = [port];

    if (hostname) {
      serverArgs.push(hostname);
    }

    httpServer.listen(...serverArgs, err => {
      if (err) {
        reject(err);
      }

      resolve(httpServer);
    });
  });
}

function normalizeBasePath(basePath) {
  if (!_lodash.default.isString(basePath)) {
    throw new Error(`Invalid path prefix ${basePath}`);
  }

  basePath = basePath.replace(/\/$/, '');

  if (basePath !== '' && basePath[0] !== '/') {
    basePath = `/${basePath}`;
  }

  return basePath;
}

function configureServer(app, routeConfiguringFunction, allowCors = true, basePath = _protocol.DEFAULT_BASE_PATH) {
  basePath = normalizeBasePath(basePath);
  app.use(_expressLogging.endLogFormatter);
  app.use((0, _serveFavicon.default)(_path.default.resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express.default.static(_static.STATIC_DIR));
  app.use(`${basePath}/produce_error`, _crash.produceError);
  app.use(`${basePath}/crash`, _crash.produceCrash);

  if (allowCors) {
    app.use(_middleware.allowCrossDomain);
  } else {
    app.use((0, _middleware.allowCrossDomainAsyncExecute)(basePath));
  }

  app.use((0, _middleware.fixPythonContentType)(basePath));
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser.default.urlencoded({
    extended: true
  }));
  app.use((0, _methodOverride.default)());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);
  app.use(_bodyParser.default.json({
    limit: '1gb'
  }));
  app.use(_expressLogging.startLogFormatter);
  routeConfiguringFunction(app, basePath);
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);
  app.use(_middleware.catch404Handler);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
