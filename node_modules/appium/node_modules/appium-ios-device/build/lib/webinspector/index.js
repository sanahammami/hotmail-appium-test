"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEB_INSPECTOR_SERVICE_NAME = exports.WebInspectorService = void 0;

require("source-map-support/register");

var _webinspectorDecoder = _interopRequireDefault(require("./transformer/webinspector-decoder"));

var _webinspectorEncoder = _interopRequireDefault(require("./transformer/webinspector-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

const WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';
exports.WEB_INSPECTOR_SERVICE_NAME = WEB_INSPECTOR_SERVICE_NAME;
const PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;
const MAX_FRAME_SIZE = 20000000;

class WebInspectorService {
  constructor(majorOsVersion, socketClient) {
    this._socketClient = socketClient;

    if (majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._decoder = new _webinspectorDecoder.default(_constants.MB);
      const plistDecoder = new _plistServiceDecoder.default();
      const splitter = new _lengthBasedSplitter.default(false, MAX_FRAME_SIZE, 0, 4, 4);

      this._socketClient.pipe(splitter).pipe(plistDecoder).pipe(this._decoder);

      this._encoder = new _webinspectorEncoder.default();
      const plistEncoder = new _plistServiceEncoder.default();

      this._encoder.pipe(plistEncoder).pipe(this._socketClient);
    } else {
      this._decoder = new _plistServiceDecoder.default();
      const splitter = new _lengthBasedSplitter.default(false, MAX_FRAME_SIZE, 0, 4, 4);

      this._socketClient.pipe(splitter).pipe(this._decoder);

      this._encoder = new _plistServiceEncoder.default();

      this._encoder.pipe(this._socketClient);
    }
  }

  sendMessage(rpcObject) {
    if (_lodash.default.isNil(rpcObject)) {
      throw new Error('Cant send a null object');
    }

    this._encoder.write(rpcObject);
  }

  listenMessage(callback) {
    this._decoder.on('data', callback);
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.WebInspectorService = WebInspectorService;
var _default = WebInspectorService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJpbnNwZWN0b3IvaW5kZXguanMiXSwibmFtZXMiOlsiV0VCX0lOU1BFQ1RPUl9TRVJWSUNFX05BTUUiLCJQQVJUSUFMX01FU1NBR0VfU1VQUE9SVF9ERVBSRUNBVElPTl9WRVJTSU9OIiwiTUFYX0ZSQU1FX1NJWkUiLCJXZWJJbnNwZWN0b3JTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJtYWpvck9zVmVyc2lvbiIsInNvY2tldENsaWVudCIsIl9zb2NrZXRDbGllbnQiLCJfZGVjb2RlciIsIldlYkluc3BlY3RvckRlY29kZXIiLCJNQiIsInBsaXN0RGVjb2RlciIsIlBsaXN0U2VydmljZURlY29kZXIiLCJzcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJwaXBlIiwiX2VuY29kZXIiLCJXZWJJbnNwZWN0b3JFbmNvZGVyIiwicGxpc3RFbmNvZGVyIiwiUGxpc3RTZXJ2aWNlRW5jb2RlciIsInNlbmRNZXNzYWdlIiwicnBjT2JqZWN0IiwiXyIsImlzTmlsIiwiRXJyb3IiLCJ3cml0ZSIsImxpc3Rlbk1lc3NhZ2UiLCJjYWxsYmFjayIsIm9uIiwiY2xvc2UiLCJkZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLDBCQUEwQixHQUFHLHdCQUFuQzs7QUFFQSxNQUFNQywyQ0FBMkMsR0FBRyxFQUFwRDtBQUVBLE1BQU1DLGNBQWMsR0FBRyxRQUF2Qjs7QUFFQSxNQUFNQyxtQkFBTixDQUEwQjtBQU94QkMsRUFBQUEsV0FBVyxDQUFFQyxjQUFGLEVBQWtCQyxZQUFsQixFQUFnQztBQUN6QyxTQUFLQyxhQUFMLEdBQXFCRCxZQUFyQjs7QUFFQSxRQUFJRCxjQUFjLEdBQUdKLDJDQUFyQixFQUFrRTtBQUVoRSxXQUFLTyxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLENBQXdCQyxhQUF4QixDQUFoQjtBQUNBLFlBQU1DLFlBQVksR0FBRyxJQUFJQyw0QkFBSixFQUFyQjtBQUNBLFlBQU1DLFFBQVEsR0FBRyxJQUFJQyw0QkFBSixDQUF3QixLQUF4QixFQUErQlosY0FBL0IsRUFBK0MsQ0FBL0MsRUFBa0QsQ0FBbEQsRUFBcUQsQ0FBckQsQ0FBakI7O0FBQ0EsV0FBS0ssYUFBTCxDQUFtQlEsSUFBbkIsQ0FBd0JGLFFBQXhCLEVBQWtDRSxJQUFsQyxDQUF1Q0osWUFBdkMsRUFBcURJLElBQXJELENBQTBELEtBQUtQLFFBQS9EOztBQUVBLFdBQUtRLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7QUFDQSxZQUFNQyxZQUFZLEdBQUcsSUFBSUMsNEJBQUosRUFBckI7O0FBQ0EsV0FBS0gsUUFBTCxDQUFjRCxJQUFkLENBQW1CRyxZQUFuQixFQUFpQ0gsSUFBakMsQ0FBc0MsS0FBS1IsYUFBM0M7QUFDRCxLQVZELE1BVU87QUFDTCxXQUFLQyxRQUFMLEdBQWdCLElBQUlJLDRCQUFKLEVBQWhCO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLElBQUlDLDRCQUFKLENBQXdCLEtBQXhCLEVBQStCWixjQUEvQixFQUErQyxDQUEvQyxFQUFrRCxDQUFsRCxFQUFxRCxDQUFyRCxDQUFqQjs7QUFDQSxXQUFLSyxhQUFMLENBQW1CUSxJQUFuQixDQUF3QkYsUUFBeEIsRUFBa0NFLElBQWxDLENBQXVDLEtBQUtQLFFBQTVDOztBQUVBLFdBQUtRLFFBQUwsR0FBZ0IsSUFBSUcsNEJBQUosRUFBaEI7O0FBQ0EsV0FBS0gsUUFBTCxDQUFjRCxJQUFkLENBQW1CLEtBQUtSLGFBQXhCO0FBQ0Q7QUFDRjs7QUFPRGEsRUFBQUEsV0FBVyxDQUFFQyxTQUFGLEVBQWE7QUFDdEIsUUFBSUMsZ0JBQUVDLEtBQUYsQ0FBUUYsU0FBUixDQUFKLEVBQXdCO0FBQ3RCLFlBQU0sSUFBSUcsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFDRCxTQUFLUixRQUFMLENBQWNTLEtBQWQsQ0FBb0JKLFNBQXBCO0FBQ0Q7O0FBWURLLEVBQUFBLGFBQWEsQ0FBRUMsUUFBRixFQUFZO0FBQ3ZCLFNBQUtuQixRQUFMLENBQWNvQixFQUFkLENBQWlCLE1BQWpCLEVBQXlCRCxRQUF6QjtBQUNEOztBQUlERSxFQUFBQSxLQUFLLEdBQUk7QUFDUCxTQUFLdEIsYUFBTCxDQUFtQnVCLE9BQW5CO0FBQ0Q7O0FBNUR1Qjs7O2VBaUVYM0IsbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3MgKi9cbmltcG9ydCBXZWJJbnNwZWN0b3JEZWNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXInO1xuaW1wb3J0IFdlYkluc3BlY3RvckVuY29kZXIgZnJvbSAnLi90cmFuc2Zvcm1lci93ZWJpbnNwZWN0b3ItZW5jb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTUIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBXRUJfSU5TUEVDVE9SX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUud2ViaW5zcGVjdG9yJztcblxuY29uc3QgUEFSVElBTF9NRVNTQUdFX1NVUFBPUlRfREVQUkVDQVRJT05fVkVSU0lPTiA9IDExO1xuXG5jb25zdCBNQVhfRlJBTUVfU0laRSA9IDIwMDAwMDAwO1xuXG5jbGFzcyBXZWJJbnNwZWN0b3JTZXJ2aWNlIHtcblxuICAvKipcbiAgICogVGhlIG1haW4gc2VydmljZSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSB3ZWJpbnNwZWN0b3JkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvck9zVmVyc2lvbiBUaGUgbWFqb3IgdmVyc2lvbiBvZiB0aGUgb3MgdmVyc2lvblxuICAgKiBAcGFyYW0geyp9IHNvY2tldENsaWVudCBUaGUgc29ja2V0IGNsaWVudCB3aGVyZSB0aGUgY29tbXVuaWNhdGlvbiB3aWxsIGhhcHBlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKG1ham9yT3NWZXJzaW9uLCBzb2NrZXRDbGllbnQpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQgPSBzb2NrZXRDbGllbnQ7XG5cbiAgICBpZiAobWFqb3JPc1ZlcnNpb24gPCBQQVJUSUFMX01FU1NBR0VfU1VQUE9SVF9ERVBSRUNBVElPTl9WRVJTSU9OKSB7XG4gICAgICAvLyAxTUIgYXMgYnVmZmVyIGZvciBidWxkaW5nIHdlYmluc3BlY3RvciBmdWxsIG1lc3NhZ2VzLiBXZSBjYW4gaW5jcmVhc2UgdGhlIHZhbHVlIGlmIG1vcmUgYnVmZmVyIGlzIG5lZWRlZFxuICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBXZWJJbnNwZWN0b3JEZWNvZGVyKE1CKTtcbiAgICAgIGNvbnN0IHBsaXN0RGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgICBjb25zdCBzcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKGZhbHNlLCBNQVhfRlJBTUVfU0laRSwgMCwgNCwgNCk7XG4gICAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZShzcGxpdHRlcikucGlwZShwbGlzdERlY29kZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICAgIHRoaXMuX2VuY29kZXIgPSBuZXcgV2ViSW5zcGVjdG9yRW5jb2RlcigpO1xuICAgICAgY29uc3QgcGxpc3RFbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICAgIHRoaXMuX2VuY29kZXIucGlwZShwbGlzdEVuY29kZXIpLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgICBjb25zdCBzcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKGZhbHNlLCBNQVhfRlJBTUVfU0laRSwgMCwgNCwgNCk7XG4gICAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZShzcGxpdHRlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcblxuICAgICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYW4gb2JqZWN0IHRvIHRoZSB3ZWJpbnNwZWN0b3JkIHNvY2tldFxuICAgKiBAcGFyYW0ge09iamVjdH0gcnBjT2JqZWN0IFRoZSBvYmplY3QgdGhhdCB3aWxsIGJlIHNlbnRcbiAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIHdoZW4gdGhlIG9iamVjdCBpcyBudWxsIG9yIHVuZGVmaW5lZFxuICAgKi9cbiAgc2VuZE1lc3NhZ2UgKHJwY09iamVjdCkge1xuICAgIGlmIChfLmlzTmlsKHJwY09iamVjdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudCBzZW5kIGEgbnVsbCBvYmplY3QnKTtcbiAgICB9XG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZShycGNPYmplY3QpO1xuICB9XG5cbiAgLyoqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBkdXJpbmcgbWVzc2FnZSBsaXN0ZW5pbmdcbiAgICogQG5hbWUgTWVzc2FnZUNhbGxiYWNrXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBycGMgb2JqZWN0IHRoYXQgaXMgc2VudCBmcm9tIHRoZSB3ZWJpbnNwZWN0b3JkXG4gICovXG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBtZXNzYWdlcyBjb21pbmcgZnJvbSB3ZWJpbnNwZWN0b3JkXG4gICAqIEBwYXJhbSB7TWVzc2FnZUNhbGxiYWNrfSBjYWxsYmFja1xuICAgKi9cbiAgbGlzdGVuTWVzc2FnZSAoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9kZWNvZGVyLm9uKCdkYXRhJywgY2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHVuZGVybHlpbmcgc29ja2V0IGNvbW11bmljYXRpbmcgd2l0aCB0aGUgcGhvbmVcbiAgICovXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgV2ViSW5zcGVjdG9yU2VydmljZSwgV0VCX0lOU1BFQ1RPUl9TRVJWSUNFX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IFdlYkluc3BlY3RvclNlcnZpY2U7XG4iXSwiZmlsZSI6ImxpYi93ZWJpbnNwZWN0b3IvaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
