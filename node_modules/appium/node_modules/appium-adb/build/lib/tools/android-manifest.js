"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers.js");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _shellQuote = require("shell-quote");

let manifestMethods = {};

async function extractApkInfoWithApkTools(localApk, aaptPath, jarPath, tmpRoot) {
  _logger.default.info('Extracting package and launch activity from manifest');

  let args = ['dump', 'badging', localApk];
  let stdout = (await (0, _teen_process.exec)(aaptPath, args)).stdout;
  let apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

  if (!apkPackage || apkPackage.length < 2) {
    throw new Error(`Cannot parse package name from ` + `'${_lodash.default.join([aaptPath, 'dump', 'badging', '"' + localApk + '"'], ' ')}' command  output`);
  }

  apkPackage = apkPackage[1];
  let apkActivity = new RegExp(/launchable-activity: name='([^']+)'/g).exec(stdout);

  if (apkActivity && apkActivity.length >= 2) {
    apkActivity = apkActivity[1];
    return {
      apkPackage,
      apkActivity
    };
  }

  let outputPath = _path.default.resolve(tmpRoot, apkPackage);

  let getLaunchActivity = ['-jar', jarPath, 'printLaunchActivity', localApk, outputPath];
  const output = await (0, _teen_process.exec)('java', getLaunchActivity);

  if (output.stderr) {
    throw new Error(`Cannot parse launchActivity from manifest: ${output.stderr}`);
  }

  stdout = output.stdout;
  let act = new RegExp(/Launch activity parsed:([^']+)/g).exec(stdout);

  if (act && act.length >= 2) {
    apkActivity = act[1];
    return {
      apkPackage,
      apkActivity
    };
  }

  throw new Error(`Cannot parse main activity name from '${stdout}' command  output`);
}

async function extractApkInfoWithApkanalyzer(localApk, apkanalyzerPath) {
  const args = ['-h', 'manifest', 'print', localApk];

  _logger.default.debug(`Starting '${apkanalyzerPath}' with args ${JSON.stringify(args)}`);

  const {
    stdout
  } = await (0, _teen_process.exec)(apkanalyzerPath, args, {
    shell: true,
    cwd: _path.default.dirname(apkanalyzerPath)
  });
  const {
    pkg,
    activity
  } = (0, _helpers.parseManifest)(stdout);

  if (!pkg) {
    throw new Error(`Cannot parse package name from ${stdout}`);
  }

  if (!activity) {
    throw new Error(`Cannot parse main activity name from ${stdout}`);
  }

  return {
    apkPackage: pkg,
    apkActivity: activity
  };
}

manifestMethods.packageAndLaunchActivityFromManifest = async function packageAndLaunchActivityFromManifest(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  const apkInfoGetters = [async () => {
    const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
    return await extractApkInfoWithApkanalyzer(appPath, apkanalyzerPath);
  }, async () => {
    await this.initAapt();
    return await extractApkInfoWithApkTools(appPath, this.binaries.aapt, this.jars['appium_apk_tools.jar'], this.tmpDir);
  }];
  let savedError;

  for (const infoGetter of apkInfoGetters) {
    try {
      const {
        apkPackage,
        apkActivity
      } = await infoGetter();

      _logger.default.info(`Package name: '${apkPackage}'`);

      _logger.default.info(`Main activity name: '${apkActivity}'`);

      return {
        apkPackage,
        apkActivity
      };
    } catch (e) {
      if (infoGetter !== _lodash.default.last(apkInfoGetters)) {
        _logger.default.info(`Using the alternative activity name detection method because of: ${e.message}`);
      }

      savedError = e;
    }
  }

  throw new Error(`packageAndLaunchActivityFromManifest failed. Original error: ${savedError.message}` + (savedError.stderr ? `; StdErr: ${savedError.stderr}` : ''));
};

manifestMethods.targetSdkVersionFromManifest = async function targetSdkVersionFromManifest(appPath) {
  const originalAppPath = appPath;

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  _logger.default.info('Extracting target SDK version from the manifest');

  try {
    const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
    const {
      stdout
    } = await (0, _teen_process.exec)(apkanalyzerPath, ['manifest', 'target-sdk', appPath], {
      shell: true,
      cwd: _path.default.dirname(apkanalyzerPath)
    });

    if (isNaN(_lodash.default.trim(stdout))) {
      throw new Error(`Cannot parse the minimum SDK version from '${stdout}'`);
    }

    return parseInt(_lodash.default.trim(stdout), 10);
  } catch (e) {
    _logger.default.info(`Cannot extract targetSdkVersion using apkanalyzer. Falling back to aapt. ` + `Original error: ${e.message}`);

    await this.initAapt();
    const args = ['dump', 'badging', appPath];
    let output;

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt, args);
      output = stdout;
    } catch (e) {
      throw new Error(`Fetching targetSdkVersion from '${originalAppPath}' failed. ` + `Original error: ${e.message}`);
    }

    const targetSdkVersion = new RegExp(/targetSdkVersion:'([^']+)'/g).exec(output);

    if (!targetSdkVersion) {
      throw new Error(`targetSdkVersion is not specified in the '${originalAppPath}' application`);
    }

    return parseInt(targetSdkVersion[1], 10);
  }
};

manifestMethods.targetSdkVersionUsingPKG = async function targetSdkVersionUsingPKG(pkg, cmdOutput = null) {
  let stdout = cmdOutput || (await this.shell(['dumpsys', 'package', pkg]));
  let targetSdkVersion = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout);

  if (targetSdkVersion && targetSdkVersion.length >= 2) {
    targetSdkVersion = targetSdkVersion[1];
  } else {
    targetSdkVersion = 0;
  }

  return parseInt(targetSdkVersion, 10);
};

manifestMethods.compileManifest = async function compileManifest(manifest, manifestPackage, targetPackage) {
  const {
    platform,
    platformPath
  } = await (0, _helpers.getAndroidPlatformAndPath)();

  if (!platform) {
    throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');
  }

  const resultPath = `${manifest}.apk`;

  const androidJarPath = _path.default.resolve(platformPath, 'android.jar');

  if (await _appiumSupport.fs.exists(resultPath)) {
    await _appiumSupport.fs.rimraf(resultPath);
  }

  try {
    await this.initAapt2();
    const args = ['link', '-o', resultPath, '--manifest', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', androidJarPath, '-v'];

    _logger.default.debug(`Compiling the manifest using '${(0, _shellQuote.quote)([this.binaries.aapt2, ...args])}'`);

    await (0, _teen_process.exec)(this.binaries.aapt2, args);
  } catch (e) {
    _logger.default.debug('Cannot compile the manifest using aapt2. Defaulting to aapt. ' + `Original error: ${e.stderr || e.message}`);

    await this.initAapt();
    const args = ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', androidJarPath, '-F', resultPath, '-f'];

    _logger.default.debug(`Compiling the manifest using '${(0, _shellQuote.quote)([this.binaries.aapt, ...args])}'`);

    try {
      await (0, _teen_process.exec)(this.binaries.aapt, args);
    } catch (e1) {
      throw new Error(`Cannot compile the manifest. Original error: ${e1.stderr || e1.message}`);
    }
  }

  _logger.default.debug(`Compiled the manifest at '${resultPath}'`);
};

manifestMethods.insertManifest = async function insertManifest(manifest, srcApk, dstApk) {
  _logger.default.debug(`Inserting manifest '${manifest}', src: '${srcApk}', dst: '${dstApk}'`);

  await _appiumSupport.zip.assertValidZip(srcApk);
  await (0, _helpers.unzipFile)(`${manifest}.apk`);

  const manifestName = _path.default.basename(manifest);

  try {
    await this.initAapt();
    await _appiumSupport.fs.copyFile(srcApk, dstApk);

    _logger.default.debug('Moving manifest');

    try {
      await (0, _teen_process.exec)(this.binaries.aapt, ['remove', dstApk, manifestName]);
    } catch (ign) {}

    await (0, _teen_process.exec)(this.binaries.aapt, ['add', dstApk, manifestName], {
      cwd: _path.default.dirname(manifest)
    });
  } catch (e) {
    _logger.default.debug('Cannot insert manifest using aapt. Defaulting to zip. ' + `Original error: ${e.stderr || e.message}`);

    const tmpRoot = await _appiumSupport.tempDir.openDir();

    try {
      _logger.default.debug(`Extracting the source apk at '${srcApk}'`);

      await _appiumSupport.zip.extractAllTo(srcApk, tmpRoot);

      _logger.default.debug('Moving manifest');

      await _appiumSupport.fs.mv(manifest, _path.default.resolve(tmpRoot, manifestName));

      _logger.default.debug(`Collecting the destination apk at '${dstApk}'`);

      await _appiumSupport.zip.toArchive(dstApk, {
        cwd: tmpRoot
      });
    } finally {
      await _appiumSupport.fs.rimraf(tmpRoot);
    }
  }

  _logger.default.debug(`Manifest insertion into '${dstApk}' is completed`);
};

manifestMethods.hasInternetPermissionFromManifest = async function hasInternetPermissionFromManifest(appPath) {
  const originalAppPath = appPath;

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  _logger.default.debug(`Checking if '${originalAppPath}' requires internet access permission in the manifest`);

  const internetPermissionPattern = /\bandroid\.permission\.INTERNET\b/;

  try {
    const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
    const args = ['manifest', 'permissions', appPath];

    _logger.default.debug(`Starting '${apkanalyzerPath}' with args ${JSON.stringify(args)}`);

    const {
      stdout
    } = await (0, _teen_process.exec)(apkanalyzerPath, args, {
      shell: true,
      cwd: _path.default.dirname(apkanalyzerPath)
    });
    return internetPermissionPattern.test(stdout);
  } catch (e) {
    _logger.default.debug('Cannot get apk permissions using apkanalyzer. Falling back to aapt. ' + `Original error: ${e.stderr || e.message}`);

    await this.initAapt();

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt, ['dump', 'badging', appPath]);
      return internetPermissionPattern.test(stdout);
    } catch (e1) {
      throw new Error(`Cannot check if '${originalAppPath}' requires internet access permission. ` + `Original error: ${e1.stderr || e1.message}`);
    }
  }
};

var _default = manifestMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
