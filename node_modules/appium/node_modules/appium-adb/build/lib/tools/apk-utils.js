"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REMOTE_CACHE_ROOT = void 0;

require("source-map-support/register");

var _helpers = require("../helpers.js");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _semver = _interopRequireDefault(require("semver"));

var _os = _interopRequireDefault(require("os"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

let apkUtilsMethods = {};
const ACTIVITIES_TROUBLESHOOTING_LINK = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md';
apkUtilsMethods.APP_INSTALL_STATE = {
  UNKNOWN: 'unknown',
  NOT_INSTALLED: 'notInstalled',
  NEWER_VERSION_INSTALLED: 'newerVersionInstalled',
  SAME_VERSION_INSTALLED: 'sameVersionInstalled',
  OLDER_VERSION_INSTALLED: 'olderVersionInstalled'
};
const REMOTE_CACHE_ROOT = '/data/local/tmp/appium_cache';
exports.REMOTE_CACHE_ROOT = REMOTE_CACHE_ROOT;

apkUtilsMethods.isAppInstalled = async function isAppInstalled(pkg) {
  _logger.default.debug(`Getting install status for ${pkg}`);

  const installedPattern = new RegExp(`^\\s*Package\\s+\\[${_lodash.default.escapeRegExp(pkg)}\\][^:]+:$`, 'm');

  try {
    const stdout = await this.shell(['dumpsys', 'package', pkg]);
    const isInstalled = installedPattern.test(stdout);

    _logger.default.debug(`'${pkg}' is${!isInstalled ? ' not' : ''} installed`);

    return isInstalled;
  } catch (e) {
    throw new Error(`Error finding if '${pkg}' is installed. Original error: ${e.message}`);
  }
};

apkUtilsMethods.startUri = async function startUri(uri, pkg) {
  if (!uri || !pkg) {
    throw new Error('URI and package arguments are required');
  }

  const args = ['am', 'start', '-W', '-a', 'android.intent.action.VIEW', '-d', uri.replace(/&/g, '\\&'), pkg];

  try {
    const res = await this.shell(args);

    if (res.toLowerCase().includes('unable to resolve intent')) {
      throw new Error(res);
    }
  } catch (e) {
    throw new Error(`Error attempting to start URI. Original error: ${e}`);
  }
};

apkUtilsMethods.startApp = async function startApp(startAppOptions = {}) {
  if (!startAppOptions.activity || !startAppOptions.pkg) {
    throw new Error('activity and pkg are required to start an application');
  }

  startAppOptions = _lodash.default.clone(startAppOptions);
  startAppOptions.activity = startAppOptions.activity.replace('$', '\\$');

  _lodash.default.defaults(startAppOptions, {
    waitPkg: startAppOptions.pkg,
    waitForLaunch: true,
    waitActivity: false,
    retry: true,
    stopApp: true
  });

  startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
  const apiLevel = await this.getApiLevel();
  const cmd = (0, _helpers.buildStartCmd)(startAppOptions, apiLevel);

  try {
    const shellOpts = {};

    if (_lodash.default.isInteger(startAppOptions.waitDuration) && startAppOptions.waitDuration > 20000) {
      shellOpts.timeout = startAppOptions.waitDuration;
    }

    const stdout = await this.shell(cmd, shellOpts);

    if (stdout.includes('Error: Activity class') && stdout.includes('does not exist')) {
      if (startAppOptions.retry && !startAppOptions.activity.startsWith('.')) {
        _logger.default.debug(`We tried to start an activity that doesn't exist, ` + `retrying with '.${startAppOptions.activity}' activity name`);

        startAppOptions.activity = `.${startAppOptions.activity}`;
        startAppOptions.retry = false;
        return await this.startApp(startAppOptions);
      }

      throw new Error(`Activity name '${startAppOptions.activity}' used to start the app doesn't ` + `exist or cannot be launched! Make sure it exists and is a launchable activity`);
    } else if (stdout.includes('java.lang.SecurityException')) {
      throw new Error(`The permission to start '${startAppOptions.activity}' activity has been denied.` + `Make sure the activity/package names are correct.`);
    }

    if (startAppOptions.waitActivity) {
      await this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration);
    }

    return stdout;
  } catch (e) {
    throw new Error(`Cannot start the '${startAppOptions.pkg}' application. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting. ` + `Original error: ${e.message}`);
  }
};

apkUtilsMethods.dumpWindows = async function dumpWindows() {
  const apiLevel = await this.getApiLevel();
  const dumpsysArg = apiLevel >= 29 ? 'displays' : 'windows';
  const cmd = ['dumpsys', 'window', dumpsysArg];
  return await this.shell(cmd);
};

apkUtilsMethods.getFocusedPackageAndActivity = async function getFocusedPackageAndActivity() {
  _logger.default.debug('Getting focused package and activity');

  const nullFocusedAppRe = new RegExp(/^\s*mFocusedApp=null/, 'm');
  const focusedAppRe = new RegExp('^\\s*mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}', 'm');
  const nullCurrentFocusRe = new RegExp(/^\s*mCurrentFocus=null/, 'm');
  const currentFocusAppRe = new RegExp('^\\s*mCurrentFocus.+\\{.+\\s([^\\s\\/]+)\\/([^\\s]+)\\b', 'm');

  try {
    const stdout = await this.dumpWindows();

    for (const pattern of [focusedAppRe, currentFocusAppRe]) {
      const match = pattern.exec(stdout);

      if (match) {
        return {
          appPackage: match[1].trim(),
          appActivity: match[2].trim()
        };
      }
    }

    for (const pattern of [nullFocusedAppRe, nullCurrentFocusRe]) {
      if (pattern.exec(stdout)) {
        return {
          appPackage: null,
          appActivity: null
        };
      }
    }

    throw new Error('Could not parse activity from dumpsys');
  } catch (e) {
    throw new Error(`Could not get focusPackageAndActivity. Original error: ${e.message}`);
  }
};

apkUtilsMethods.waitForActivityOrNot = async function waitForActivityOrNot(pkg, activity, waitForStop, waitMs = 20000) {
  if (!pkg || !activity) {
    throw new Error('Package and activity required.');
  }

  _logger.default.debug(`Waiting up to ${waitMs}ms for activity matching pkg: '${pkg}' and ` + `activity: '${activity}' to${waitForStop ? ' not' : ''} be focused`);

  const splitNames = names => names.split(',').map(name => name.trim());

  const allPackages = splitNames(pkg);
  const allActivities = splitNames(activity);
  let possibleActivityNames = [];

  for (let oneActivity of allActivities) {
    if (oneActivity.startsWith('.')) {
      for (let currentPkg of allPackages) {
        possibleActivityNames.push(`${currentPkg}${oneActivity}`.replace(/\.+/g, '.'));
      }
    } else {
      possibleActivityNames.push(oneActivity);
      possibleActivityNames.push(`${pkg}.${oneActivity}`);
    }
  }

  _logger.default.debug(`Possible activities, to be checked: ${possibleActivityNames.map(name => `'${name}'`).join(', ')}`);

  let possibleActivityPatterns = possibleActivityNames.map(possibleActivityName => new RegExp(`^${possibleActivityName.replace(/\./g, '\\.').replace(/\*/g, '.*?').replace(/\$/g, '\\$')}$`));
  let retries = parseInt(waitMs / 750, 10) || 1;
  retries = isNaN(retries) ? 30 : retries;
  await (0, _asyncbox.retryInterval)(retries, 750, async () => {
    let {
      appPackage,
      appActivity
    } = await this.getFocusedPackageAndActivity();

    if (appActivity && appPackage) {
      let fullyQualifiedActivity = appActivity.startsWith('.') ? `${appPackage}${appActivity}` : appActivity;

      _logger.default.debug(`Found package: '${appPackage}' and fully qualified activity name : '${fullyQualifiedActivity}'`);

      let foundAct = _lodash.default.includes(allPackages, appPackage) && _lodash.default.findIndex(possibleActivityPatterns, possiblePattern => possiblePattern.test(fullyQualifiedActivity)) !== -1;

      if (!waitForStop && foundAct || waitForStop && !foundAct) {
        return;
      }
    }

    _logger.default.debug('Incorrect package and activity. Retrying.');

    throw new Error(`${possibleActivityNames.map(name => `'${name}'`).join(' or ')} never ${waitForStop ? 'stopped' : 'started'}. ` + `Visit ${ACTIVITIES_TROUBLESHOOTING_LINK} for troubleshooting`);
  });
};

apkUtilsMethods.waitForActivity = async function waitForActivity(pkg, act, waitMs = 20000) {
  await this.waitForActivityOrNot(pkg, act, false, waitMs);
};

apkUtilsMethods.waitForNotActivity = async function waitForNotActivity(pkg, act, waitMs = 20000) {
  await this.waitForActivityOrNot(pkg, act, true, waitMs);
};

apkUtilsMethods.uninstallApk = async function uninstallApk(pkg, options = {}) {
  _logger.default.debug(`Uninstalling ${pkg}`);

  if (!(await this.isAppInstalled(pkg))) {
    _logger.default.info(`${pkg} was not uninstalled, because it was not present on the device`);

    return false;
  }

  const cmd = ['uninstall'];

  if (options.keepData) {
    cmd.push('-k');
  }

  cmd.push(pkg);
  let stdout;

  try {
    await this.forceStop(pkg);
    stdout = (await this.adbExec(cmd, {
      timeout: options.timeout
    })).trim();
  } catch (e) {
    throw new Error(`Unable to uninstall APK. Original error: ${e.message}`);
  }

  _logger.default.debug(`'adb ${cmd.join(' ')}' command output: ${stdout}`);

  if (stdout.includes('Success')) {
    _logger.default.info(`${pkg} was successfully uninstalled`);

    return true;
  }

  _logger.default.info(`${pkg} was not uninstalled`);

  return false;
};

apkUtilsMethods.installFromDevicePath = async function installFromDevicePath(apkPathOnDevice, opts = {}) {
  let stdout = await this.shell(['pm', 'install', '-r', apkPathOnDevice], opts);

  if (stdout.indexOf('Failure') !== -1) {
    throw new Error(`Remote install failed: ${stdout}`);
  }
};

apkUtilsMethods.cacheApk = async function cacheApk(apkPath, options = {}) {
  const appHash = await _appiumSupport.fs.hash(apkPath);

  const remotePath = _path.default.posix.join(REMOTE_CACHE_ROOT, `${appHash}.apk`);

  const remoteCachedFiles = [];

  try {
    const errorMarker = '_ERROR_';
    let lsOutput = null;

    if (this._areExtendedLsOptionsSupported === true || !_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
      lsOutput = await this.shell([`ls -t -1 ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
    }

    if (!_lodash.default.isString(lsOutput) || lsOutput.includes(errorMarker) && !lsOutput.includes(REMOTE_CACHE_ROOT)) {
      if (!_lodash.default.isBoolean(this._areExtendedLsOptionsSupported)) {
        _logger.default.debug('The current Android API does not support extended ls options. ' + 'Defaulting to no-options call');
      }

      lsOutput = await this.shell([`ls ${REMOTE_CACHE_ROOT} 2>&1 || echo ${errorMarker}`]);
      this._areExtendedLsOptionsSupported = false;
    } else {
      this._areExtendedLsOptionsSupported = true;
    }

    if (lsOutput.includes(errorMarker)) {
      throw new Error(lsOutput.substring(0, lsOutput.indexOf(errorMarker)));
    }

    remoteCachedFiles.push(...lsOutput.split('\n').map(x => x.trim()).filter(Boolean));
  } catch (e) {
    _logger.default.debug(`Got an error '${e.message.trim()}' while getting the list of files in the cache. ` + `Assuming the cache does not exist yet`);

    await this.shell(['mkdir', '-p', REMOTE_CACHE_ROOT]);
  }

  _logger.default.debug(`The count of applications in the cache: ${remoteCachedFiles.length}`);

  const toHash = remotePath => _path.default.posix.parse(remotePath).name;

  if (remoteCachedFiles.find(x => toHash(x) === appHash)) {
    _logger.default.info(`The application at '${apkPath}' is already cached to '${remotePath}'`);
  } else {
    _logger.default.info(`Caching the application at '${apkPath}' to '${remotePath}'`);

    const started = process.hrtime();
    await this.push(apkPath, remotePath, {
      timeout: options.timeout
    });
    const [seconds, nanos] = process.hrtime(started);
    const {
      size
    } = await _appiumSupport.fs.stat(apkPath);

    _logger.default.info(`The upload of '${_path.default.basename(apkPath)}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `took ${(seconds + nanos / 1e9).toFixed(3)}s`);
  }

  if (!this.remoteAppsCache) {
    this.remoteAppsCache = new _lruCache.default({
      max: this.remoteAppsCacheLimit
    });
  }

  _lodash.default.difference(this.remoteAppsCache.keys(), remoteCachedFiles.map(toHash)).forEach(hash => this.remoteAppsCache.del(hash));

  this.remoteAppsCache.set(appHash, remotePath);
  const entriesToCleanup = remoteCachedFiles.map(x => _path.default.posix.join(REMOTE_CACHE_ROOT, x)).filter(x => !this.remoteAppsCache.has(toHash(x))).slice(this.remoteAppsCacheLimit - this.remoteAppsCache.keys().length);

  if (!_lodash.default.isEmpty(entriesToCleanup)) {
    try {
      await this.shell(['rm', '-f', ...entriesToCleanup]);

      _logger.default.debug(`Deleted ${entriesToCleanup.length} expired application cache entries`);
    } catch (e) {
      _logger.default.warn(`Cannot delete ${entriesToCleanup.length} expired application cache entries. ` + `Original error: ${e.message}`);
    }
  }

  return remotePath;
};

apkUtilsMethods.install = async function install(appPath, options = {}) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    return await this.installApks(appPath, options);
  }

  options = _lodash.default.cloneDeep(options);

  _lodash.default.defaults(options, {
    replace: true,
    timeout: this.adbExecTimeout === _helpers.DEFAULT_ADB_EXEC_TIMEOUT ? _helpers.APK_INSTALL_TIMEOUT : this.adbExecTimeout,
    timeoutCapName: 'androidInstallTimeout'
  });

  const installArgs = (0, _helpers.buildInstallArgs)((await this.getApiLevel()), options);
  const installOpts = {
    timeout: options.timeout,
    timeoutCapName: options.timeoutCapName
  };

  let performAppInstall = async () => await this.adbExec(['install', ...installArgs, appPath], installOpts);

  if (this.remoteAppsCacheLimit > 0) {
    const cachedRemotePath = await this.cacheApk(appPath, {
      timeout: options.timeout
    });

    performAppInstall = async () => await this.shell(['pm', 'install', ...installArgs, cachedRemotePath], installOpts);
  }

  try {
    const started = process.hrtime();
    const output = await performAppInstall();
    const [seconds, nanos] = process.hrtime(started);

    _logger.default.info(`The installation of '${_path.default.basename(appPath)}' took ${(seconds + nanos / 1e9).toFixed(3)}s`);

    const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

    _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

    if (/\[INSTALL[A-Z_]+FAILED[A-Z_]+\]/.test(output)) {
      if (this.isTestPackageOnlyError(output)) {
        const msg = `Set 'allowTestPackages' capability to true in order to allow test packages installation.`;

        _logger.default.warn(msg);

        throw new Error(`${output}\n${msg}`);
      }

      throw new Error(output);
    }
  } catch (err) {
    if (!err.message.includes('INSTALL_FAILED_ALREADY_EXISTS')) {
      throw err;
    }

    _logger.default.debug(`Application '${appPath}' already installed. Continuing.`);
  }
};

apkUtilsMethods.getApplicationInstallState = async function getApplicationInstallState(appPath, pkg = null) {
  let apkInfo = null;

  if (!pkg) {
    apkInfo = await this.getApkInfo(appPath);
    pkg = apkInfo.name;
  }

  if (!pkg) {
    _logger.default.warn(`Cannot read the package name of '${appPath}'`);

    return this.APP_INSTALL_STATE.UNKNOWN;
  }

  if (!(await this.isAppInstalled(pkg))) {
    _logger.default.debug(`App '${appPath}' is not installed`);

    return this.APP_INSTALL_STATE.NOT_INSTALLED;
  }

  const {
    versionCode: pkgVersionCode,
    versionName: pkgVersionNameStr
  } = await this.getPackageInfo(pkg);

  const pkgVersionName = _semver.default.valid(_semver.default.coerce(pkgVersionNameStr));

  if (!apkInfo) {
    apkInfo = await this.getApkInfo(appPath);
  }

  const {
    versionCode: apkVersionCode,
    versionName: apkVersionNameStr
  } = apkInfo;

  const apkVersionName = _semver.default.valid(_semver.default.coerce(apkVersionNameStr));

  if (!_lodash.default.isInteger(apkVersionCode) || !_lodash.default.isInteger(pkgVersionCode)) {
    _logger.default.warn(`Cannot read version codes of '${appPath}' and/or '${pkg}'`);

    if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
      _logger.default.warn(`Cannot read version names of '${appPath}' and/or '${pkg}'`);

      return this.APP_INSTALL_STATE.UNKNOWN;
    }
  }

  if (_lodash.default.isInteger(apkVersionCode) && _lodash.default.isInteger(pkgVersionCode)) {
    if (pkgVersionCode > apkVersionCode) {
      _logger.default.debug(`The version code of the installed '${pkg}' is greater than the application version code (${pkgVersionCode} > ${apkVersionCode})`);

      return this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED;
    }

    if (pkgVersionCode === apkVersionCode) {
      if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
        _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

        return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
      }

      if (!_lodash.default.isString(apkVersionName) || !_lodash.default.isString(pkgVersionName)) {
        _logger.default.debug(`The version name of the installed '${pkg}' is equal to application version name (${pkgVersionCode} === ${apkVersionCode})`);

        return this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
      }
    }
  } else if (_lodash.default.isString(apkVersionName) && _lodash.default.isString(pkgVersionName) && _semver.default.satisfies(pkgVersionName, `>=${apkVersionName}`)) {
    _logger.default.debug(`The version name of the installed '${pkg}' is greater or equal to the application version name ('${pkgVersionName}' >= '${apkVersionName}')`);

    return _semver.default.satisfies(pkgVersionName, `>${apkVersionName}`) ? this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED : this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED;
  }

  _logger.default.debug(`The installed '${pkg}' package is older than '${appPath}' (${pkgVersionCode} < ${apkVersionCode} or '${pkgVersionName}' < '${apkVersionName}')'`);

  return this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED;
};

apkUtilsMethods.installOrUpgrade = async function installOrUpgrade(appPath, pkg = null, options = {}) {
  if (!pkg) {
    const apkInfo = await this.getApkInfo(appPath);
    pkg = apkInfo.name;
  }

  const {
    enforceCurrentBuild
  } = options;
  const appState = await this.getApplicationInstallState(appPath, pkg);
  let wasUninstalled = false;

  const uninstallPackage = async () => {
    if (!(await this.uninstallApk(pkg))) {
      throw new Error(`'${pkg}' package cannot be uninstalled`);
    }

    wasUninstalled = true;
  };

  switch (appState) {
    case this.APP_INSTALL_STATE.NOT_INSTALLED:
      _logger.default.debug(`Installing '${appPath}'`);

      await this.install(appPath, Object.assign({}, options, {
        replace: false
      }));
      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED:
      if (enforceCurrentBuild) {
        _logger.default.info(`Downgrading '${pkg}' as requested`);

        await uninstallPackage();
        break;
      }

      _logger.default.debug(`There is no need to downgrade '${pkg}'`);

      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.SAME_VERSION_INSTALLED:
      if (enforceCurrentBuild) {
        break;
      }

      _logger.default.debug(`There is no need to install/upgrade '${appPath}'`);

      return {
        appState,
        wasUninstalled
      };

    case this.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED:
      _logger.default.debug(`Executing upgrade of '${appPath}'`);

      break;

    default:
      _logger.default.debug(`The current install state of '${appPath}' is unknown. Installing anyway`);

      break;
  }

  try {
    await this.install(appPath, Object.assign({}, options, {
      replace: true
    }));
  } catch (err) {
    _logger.default.warn(`Cannot install/upgrade '${pkg}' because of '${err.message}'. Trying full reinstall`);

    await uninstallPackage();
    await this.install(appPath, Object.assign({}, options, {
      replace: false
    }));
  }

  return {
    appState,
    wasUninstalled
  };
};

apkUtilsMethods.extractStringsFromApk = async function extractStringsFromApk(appPath, language, out) {
  _logger.default.debug(`Extracting strings from for language: ${language || 'default'}`);

  const originalAppPath = appPath;

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractLanguageApk(appPath, language);
  }

  let apkStrings = {};
  let configMarker;

  try {
    await this.initAapt();
    configMarker = await (0, _helpers.formatConfigMarker)(async () => {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt, ['d', 'configurations', appPath]);
      return stdout.split(_os.default.EOL);
    }, language, '(default)');
    const {
      stdout
    } = await (0, _teen_process.exec)(this.binaries.aapt, ['d', '--values', 'resources', appPath]);
    apkStrings = (0, _helpers.parseAaptStrings)(stdout, configMarker);
  } catch (e) {
    _logger.default.debug('Cannot extract resources using aapt. Trying aapt2. ' + `Original error: ${e.stderr || e.message}`);

    await this.initAapt2();
    configMarker = await (0, _helpers.formatConfigMarker)(async () => {
      const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
      const {
        stdout
      } = await (0, _teen_process.exec)(apkanalyzerPath, ['resources', 'configs', '--type', 'string', appPath], {
        shell: true,
        cwd: _path.default.dirname(apkanalyzerPath)
      });
      return stdout.split(_os.default.EOL);
    }, language, '');

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt2, ['dump', appPath]);
      apkStrings = (0, _helpers.parseAapt2Strings)(stdout, configMarker);
    } catch (e) {
      throw new Error(`Cannot extract resources from '${originalAppPath}'. ` + `Original error: ${e.message}`);
    }
  }

  if (_lodash.default.isEmpty(apkStrings)) {
    _logger.default.warn(`No strings have been found in '${originalAppPath}' resources ` + `for '${configMarker || 'default'}' configuration`);
  } else {
    _logger.default.info(`Successfully extracted ${_lodash.default.keys(apkStrings).length} strings from ` + `'${originalAppPath}' resources for '${configMarker || 'default'}' configuration`);
  }

  const localPath = _path.default.resolve(out, 'strings.json');

  await (0, _appiumSupport.mkdirp)(out);
  await _appiumSupport.fs.writeFile(localPath, JSON.stringify(apkStrings, null, 2), 'utf-8');
  return {
    apkStrings,
    localPath
  };
};

apkUtilsMethods.getDeviceLanguage = async function getDeviceLanguage() {
  let language;

  if ((await this.getApiLevel()) < 23) {
    language = await this.getDeviceSysLanguage();

    if (!language) {
      language = await this.getDeviceProductLanguage();
    }
  } else {
    language = (await this.getDeviceLocale()).split('-')[0];
  }

  return language;
};

apkUtilsMethods.getDeviceCountry = async function getDeviceCountry() {
  let country = await this.getDeviceSysCountry();

  if (!country) {
    country = await this.getDeviceProductCountry();
  }

  return country;
};

apkUtilsMethods.getDeviceLocale = async function getDeviceLocale() {
  let locale = await this.getDeviceSysLocale();

  if (!locale) {
    locale = await this.getDeviceProductLocale();
  }

  return locale;
};

apkUtilsMethods.setDeviceLocale = async function setDeviceLocale(locale) {
  const validateLocale = new RegExp(/[a-zA-Z]+-[a-zA-Z0-9]+/);

  if (!validateLocale.test(locale)) {
    _logger.default.warn(`setDeviceLocale requires the following format: en-US or ja-JP`);

    return;
  }

  let split_locale = locale.split('-');
  await this.setDeviceLanguageCountry(split_locale[0], split_locale[1]);
};

apkUtilsMethods.ensureCurrentLocale = async function ensureCurrentLocale(language, country, script = null) {
  const hasLanguage = _lodash.default.isString(language);

  const hasCountry = _lodash.default.isString(country);

  if (!hasLanguage && !hasCountry) {
    _logger.default.warn('ensureCurrentLocale requires language or country');

    return false;
  }

  language = (language || '').toLowerCase();
  country = (country || '').toLowerCase();
  const apiLevel = await this.getApiLevel();
  return await (0, _asyncbox.retryInterval)(5, 1000, async () => {
    try {
      if (apiLevel < 23) {
        let curLanguage, curCountry;

        if (hasLanguage) {
          curLanguage = (await this.getDeviceLanguage()).toLowerCase();

          if (!hasCountry && language === curLanguage) {
            return true;
          }
        }

        if (hasCountry) {
          curCountry = (await this.getDeviceCountry()).toLowerCase();

          if (!hasLanguage && country === curCountry) {
            return true;
          }
        }

        if (language === curLanguage && country === curCountry) {
          return true;
        }
      } else {
        const curLocale = (await this.getDeviceLocale()).toLowerCase();
        const localeCode = script ? `${language}-${script.toLowerCase()}-${country}` : `${language}-${country}`;

        if (localeCode === curLocale) {
          _logger.default.debug(`Requested locale is equal to current locale: '${curLocale}'`);

          return true;
        }
      }

      return false;
    } catch (err) {
      _logger.default.error(`Unable to check device localization: ${err.message}`);

      _logger.default.debug('Restarting ADB and retrying...');

      await this.restartAdb();
      throw err;
    }
  });
};

apkUtilsMethods.setDeviceLanguageCountry = async function setDeviceLanguageCountry(language, country, script = null) {
  let hasLanguage = language && _lodash.default.isString(language);

  let hasCountry = country && _lodash.default.isString(country);

  if (!hasLanguage || !hasCountry) {
    _logger.default.warn(`setDeviceLanguageCountry requires language and country at least`);

    _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

    return;
  }

  let apiLevel = await this.getApiLevel();
  language = (language || '').toLowerCase();
  country = (country || '').toUpperCase();

  if (apiLevel < 23) {
    let curLanguage = (await this.getDeviceLanguage()).toLowerCase();
    let curCountry = (await this.getDeviceCountry()).toUpperCase();

    if (language !== curLanguage || country !== curCountry) {
      await this.setDeviceSysLocaleViaSettingApp(language, country);
    }
  } else {
    let curLocale = await this.getDeviceLocale();
    const localeCode = script ? `${language}-${script}-${country}` : `${language}-${country}`;

    _logger.default.debug(`Current locale: '${curLocale}'; requested locale: '${localeCode}'`);

    if (localeCode.toLowerCase() !== curLocale.toLowerCase()) {
      await this.setDeviceSysLocaleViaSettingApp(language, country, script);
    }
  }
};

apkUtilsMethods.getApkInfo = async function getApkInfo(appPath) {
  if (!(await _appiumSupport.fs.exists(appPath))) {
    throw new Error(`The file at path ${appPath} does not exist or is not accessible`);
  }

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  try {
    const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
    const args = ['manifest', 'print', appPath];

    _logger.default.debug(`Starting '${apkanalyzerPath}' with args ${JSON.stringify(args)}`);

    const {
      stdout
    } = await (0, _teen_process.exec)(apkanalyzerPath, args, {
      shell: true,
      cwd: _path.default.dirname(apkanalyzerPath)
    });
    const {
      pkg,
      versionName,
      versionCode
    } = (0, _helpers.parseManifest)(stdout);
    return {
      name: pkg,
      versionCode,
      versionName
    };
  } catch (e) {
    _logger.default.info(`Cannot extract apk info using apkanalyzer. Falling back to aapt. ` + `Original error: ${e.stderr || e.message}`);

    await this.initAapt();

    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(this.binaries.aapt, ['d', 'badging', appPath]);
      const matches = new RegExp(/package: name='([^']+)' versionCode='(\d+)' versionName='([^']+)'/).exec(stdout);

      if (matches) {
        return {
          name: matches[1],
          versionCode: parseInt(matches[2], 10),
          versionName: matches[3]
        };
      }
    } catch (err) {
      _logger.default.warn(`Error "${err.stderr || err.message}" while getting badging info`);
    }
  }

  return {};
};

apkUtilsMethods.getPackageInfo = async function getPackageInfo(pkg) {
  _logger.default.debug(`Getting package info for '${pkg}'`);

  let result = {
    name: pkg
  };

  try {
    const stdout = await this.shell(['dumpsys', 'package', pkg]);
    const versionNameMatch = new RegExp(/versionName=([\d+.]+)/).exec(stdout);

    if (versionNameMatch) {
      result.versionName = versionNameMatch[1];
    }

    const versionCodeMatch = new RegExp(/versionCode=(\d+)/).exec(stdout);

    if (versionCodeMatch) {
      result.versionCode = parseInt(versionCodeMatch[1], 10);
    }

    return result;
  } catch (err) {
    _logger.default.warn(`Error '${err.message}' while dumping package info`);
  }

  return result;
};

apkUtilsMethods.pullApk = async function pullApk(pkg, tmpDir) {
  const pkgPath = (await this.adbExec(['shell', 'pm', 'path', pkg])).replace('package:', '');

  const tmpApp = _path.default.resolve(tmpDir, `${pkg}.apk`);

  await this.pull(pkgPath, tmpApp);

  _logger.default.debug(`Pulled app for package '${pkg}' to '${tmpApp}'`);

  return tmpApp;
};

var _default = apkUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
