"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

require("source-map-support/register");

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

var _path = _interopRequireDefault(require("path"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  async hasAccess(path) {
    try {
      await this.access(path, _fs2.default.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  async mkdir(dirName) {
    let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

    try {
      await _mkdir(dirName);
    } catch (err) {
      if (err && err.code !== 'EEXIST') {
        throw err;
      }
    }
  },

  async copyFile(source, destination, ...otherArgs) {
    if (!(await this.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
  },

  async md5(filePath) {
    return await md5(filePath);
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = _fs2.default.createReadStream(filePath);

      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  },

  async walkDir(dir, recursive, callback) {
    for (const item of await fs.readdir(dir)) {
      const itemPath = _path.default.join(dir, item);

      const isDirectory = (await fs.stat(itemPath)).isDirectory();
      const found = await callback(itemPath, isDirectory);

      if (found) {
        return itemPath;
      }

      if (isDirectory && recursive) {
        const foundPath = await this.walkDir(itemPath, recursive, callback);

        if (foundPath) {
          return foundPath;
        }
      }
    }

    return null;
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (const s of simples) {
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

const syncFunctions = ['createReadStream', 'createWriteStream'];

for (const s of syncFunctions) {
  fs[s] = _fs2.default[s];
}

const constants = ['F_OK', 'R_OK', 'W_OK', 'X_OK', 'constants'];

for (const c of constants) {
  fs[c] = _fs2.default[c];
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
