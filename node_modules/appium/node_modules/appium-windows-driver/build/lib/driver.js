"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/appium/compare_images')]];

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = NO_PROXY;
    this.opts.address = opts.address || _winappdriver.DEFAULT_WAD_HOST;
  }

  async createSession(caps, reqCaps, curSessions) {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error('WinAppDriver tests only run on Windows');
    }

    try {
      let sessionId;
      [sessionId] = await super.createSession(caps);
      await this.startWinAppDriverSession(curSessions);
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  getNextAvailablePort(curSessions) {
    let newWADPort = _winappdriver.DEFAULT_WAD_PORT;

    while (_lodash.default.find(curSessions, o => o.WADPort === newWADPort)) {
      newWADPort++;
    }

    return newWADPort;
  }

  async startWinAppDriverSession(curSessions) {
    this.opts.port = this.getNextAvailablePort(curSessions);
    this.winAppDriver = new _winappdriver.WinAppDriver({
      app: this.opts.app,
      port: this.opts.port
    });
    await this.winAppDriver.start();
    await this.winAppDriver.startSession(this.caps);
    this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
    this.jwpProxyActive = true;
  }

  async deleteSession() {
    _logger.default.debug('Deleting WinAppDriver session');

    if (this.winAppDriver && this.jwpProxyActive) {
      await this.winAppDriver.deleteSession();
      await this.winAppDriver.stop();
      this.winAppDriver = null;
    }

    this.jwpProxyActive = false;
    await super.deleteSession();
  }

  proxyActive() {
    return true;
  }

  canProxy() {
    return true;
  }

  getProxyAvoidList() {
    return this.jwpProxyAvoid;
  }

  get driverData() {
    return {
      WADPort: this.opts.port
    };
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiTk9fUFJPWFkiLCJSZWdFeHAiLCJXaW5kb3dzRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImp3cFByb3h5QWN0aXZlIiwiandwUHJveHlBdm9pZCIsImFkZHJlc3MiLCJERUZBVUxUX1dBRF9IT1NUIiwiY3JlYXRlU2Vzc2lvbiIsImNhcHMiLCJyZXFDYXBzIiwiY3VyU2Vzc2lvbnMiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJFcnJvciIsInNlc3Npb25JZCIsInN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbiIsImUiLCJkZWxldGVTZXNzaW9uIiwiZ2V0TmV4dEF2YWlsYWJsZVBvcnQiLCJuZXdXQURQb3J0IiwiREVGQVVMVF9XQURfUE9SVCIsIl8iLCJmaW5kIiwibyIsIldBRFBvcnQiLCJwb3J0Iiwid2luQXBwRHJpdmVyIiwiV2luQXBwRHJpdmVyIiwiYXBwIiwic3RhcnQiLCJzdGFydFNlc3Npb24iLCJwcm94eVJlcVJlcyIsImJpbmQiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0b3AiLCJwcm94eUFjdGl2ZSIsImNhblByb3h5IiwiZ2V0UHJveHlBdm9pZExpc3QiLCJkcml2ZXJEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxDQUNmLENBQUMsTUFBRCxFQUFTLElBQUlDLE1BQUosQ0FBVyx1Q0FBWCxDQUFULENBRGUsQ0FBakI7O0FBS0EsTUFBTUMsYUFBTixTQUE0QkMsNEJBQTVCLENBQXVDO0FBQ3JDQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWFDLGtCQUFrQixHQUFHLElBQWxDLEVBQXdDO0FBQ2pELFVBQU1ELElBQU4sRUFBWUMsa0JBQVo7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLEtBQXRCO0FBRUEsU0FBS0MsYUFBTCxHQUFxQlIsUUFBckI7QUFFQSxTQUFLSyxJQUFMLENBQVVJLE9BQVYsR0FBb0JKLElBQUksQ0FBQ0ksT0FBTCxJQUFnQkMsOEJBQXBDO0FBQ0Q7O0FBRUQsUUFBTUMsYUFBTixDQUFxQkMsSUFBckIsRUFBMkJDLE9BQTNCLEVBQW9DQyxXQUFwQyxFQUFpRDtBQUUvQyxRQUFJLENBQUNDLHNCQUFPQyxTQUFQLEVBQUwsRUFBeUI7QUFDdkIsWUFBTSxJQUFJQyxLQUFKLENBQVUsd0NBQVYsQ0FBTjtBQUNEOztBQUNELFFBQUk7QUFDRixVQUFJQyxTQUFKO0FBQ0EsT0FBQ0EsU0FBRCxJQUFjLE1BQU0sTUFBTVAsYUFBTixDQUFvQkMsSUFBcEIsQ0FBcEI7QUFDQSxZQUFNLEtBQUtPLHdCQUFMLENBQThCTCxXQUE5QixDQUFOO0FBQ0EsYUFBTyxDQUFDSSxTQUFELEVBQVlOLElBQVosQ0FBUDtBQUNELEtBTEQsQ0FLRSxPQUFPUSxDQUFQLEVBQVU7QUFDVixZQUFNLEtBQUtDLGFBQUwsRUFBTjtBQUNBLFlBQU1ELENBQU47QUFDRDtBQUNGOztBQUVERSxFQUFBQSxvQkFBb0IsQ0FBRVIsV0FBRixFQUFlO0FBQ2pDLFFBQUlTLFVBQVUsR0FBR0MsOEJBQWpCOztBQUdBLFdBQU9DLGdCQUFFQyxJQUFGLENBQU9aLFdBQVAsRUFBcUJhLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxPQUFGLEtBQWNMLFVBQXpDLENBQVAsRUFBNkQ7QUFDM0RBLE1BQUFBLFVBQVU7QUFDWDs7QUFFRCxXQUFPQSxVQUFQO0FBQ0Q7O0FBRUQsUUFBTUosd0JBQU4sQ0FBZ0NMLFdBQWhDLEVBQTZDO0FBRTNDLFNBQUtULElBQUwsQ0FBVXdCLElBQVYsR0FBaUIsS0FBS1Asb0JBQUwsQ0FBMEJSLFdBQTFCLENBQWpCO0FBQ0EsU0FBS2dCLFlBQUwsR0FBb0IsSUFBSUMsMEJBQUosQ0FBaUI7QUFDbkNDLE1BQUFBLEdBQUcsRUFBRSxLQUFLM0IsSUFBTCxDQUFVMkIsR0FEb0I7QUFFbkNILE1BQUFBLElBQUksRUFBRSxLQUFLeEIsSUFBTCxDQUFVd0I7QUFGbUIsS0FBakIsQ0FBcEI7QUFLQSxVQUFNLEtBQUtDLFlBQUwsQ0FBa0JHLEtBQWxCLEVBQU47QUFDQSxVQUFNLEtBQUtILFlBQUwsQ0FBa0JJLFlBQWxCLENBQStCLEtBQUt0QixJQUFwQyxDQUFOO0FBQ0EsU0FBS3VCLFdBQUwsR0FBbUIsS0FBS0wsWUFBTCxDQUFrQkssV0FBbEIsQ0FBOEJDLElBQTlCLENBQW1DLEtBQUtOLFlBQXhDLENBQW5CO0FBR0EsU0FBS3ZCLGNBQUwsR0FBc0IsSUFBdEI7QUFDRDs7QUFFRCxRQUFNYyxhQUFOLEdBQXVCO0FBQ3JCZ0Isb0JBQU9DLEtBQVAsQ0FBYSwrQkFBYjs7QUFFQSxRQUFJLEtBQUtSLFlBQUwsSUFBcUIsS0FBS3ZCLGNBQTlCLEVBQThDO0FBQzVDLFlBQU0sS0FBS3VCLFlBQUwsQ0FBa0JULGFBQWxCLEVBQU47QUFDQSxZQUFNLEtBQUtTLFlBQUwsQ0FBa0JTLElBQWxCLEVBQU47QUFDQSxXQUFLVCxZQUFMLEdBQW9CLElBQXBCO0FBQ0Q7O0FBQ0QsU0FBS3ZCLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxVQUFNLE1BQU1jLGFBQU4sRUFBTjtBQUNEOztBQUVEbUIsRUFBQUEsV0FBVyxHQUFJO0FBRWIsV0FBTyxJQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLFFBQVEsR0FBSTtBQUVWLFdBQU8sSUFBUDtBQUNEOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBaUI7QUFDaEMsV0FBTyxLQUFLbEMsYUFBWjtBQUNEOztBQUVELE1BQUltQyxVQUFKLEdBQWtCO0FBQ2hCLFdBQU87QUFBQ2YsTUFBQUEsT0FBTyxFQUFFLEtBQUt2QixJQUFMLENBQVV3QjtBQUFwQixLQUFQO0FBQ0Q7O0FBakZvQzs7O2VBcUZ4QjNCLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmFzZURyaXZlciB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBXaW5BcHBEcml2ZXIsIERFRkFVTFRfV0FEX0hPU1QsIERFRkFVTFRfV0FEX1BPUlQgfSBmcm9tICcuL3dpbmFwcGRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgTk9fUFJPWFkgPSBbXG4gIFsnUE9TVCcsIG5ldyBSZWdFeHAoJ14vc2Vzc2lvbi9bXi9dKy9hcHBpdW0vY29tcGFyZV9pbWFnZXMnKV0sXG5dO1xuXG4vLyBBcHBpdW0gaW5zdGFudGlhdGVzIHRoaXMgY2xhc3NcbmNsYXNzIFdpbmRvd3NEcml2ZXIgZXh0ZW5kcyBCYXNlRHJpdmVyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc2hvdWxkVmFsaWRhdGVDYXBzID0gdHJ1ZSkge1xuICAgIHN1cGVyKG9wdHMsIHNob3VsZFZhbGlkYXRlQ2Fwcyk7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5qd3BQcm94eUF2b2lkID0gTk9fUFJPWFk7XG5cbiAgICB0aGlzLm9wdHMuYWRkcmVzcyA9IG9wdHMuYWRkcmVzcyB8fCBERUZBVUxUX1dBRF9IT1NUO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2FwcywgcmVxQ2FwcywgY3VyU2Vzc2lvbnMpIHtcblxuICAgIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbkFwcERyaXZlciB0ZXN0cyBvbmx5IHJ1biBvbiBXaW5kb3dzJyk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgc2Vzc2lvbklkO1xuICAgICAgW3Nlc3Npb25JZF0gPSBhd2FpdCBzdXBlci5jcmVhdGVTZXNzaW9uKGNhcHMpO1xuICAgICAgYXdhaXQgdGhpcy5zdGFydFdpbkFwcERyaXZlclNlc3Npb24oY3VyU2Vzc2lvbnMpO1xuICAgICAgcmV0dXJuIFtzZXNzaW9uSWQsIGNhcHNdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBnZXROZXh0QXZhaWxhYmxlUG9ydCAoY3VyU2Vzc2lvbnMpIHtcbiAgICBsZXQgbmV3V0FEUG9ydCA9IERFRkFVTFRfV0FEX1BPUlQ7XG5cbiAgICAvLyBzdGFydCBhdCA0NzI0IGFuZCBnbyB1cCB0aWxsIHdlIGZpbmQgYSBwb3J0IHRoYXQgaXNuJ3QgaW4gdXNlXG4gICAgd2hpbGUgKF8uZmluZChjdXJTZXNzaW9ucywgKG8pID0+IG8uV0FEUG9ydCA9PT0gbmV3V0FEUG9ydCkpIHtcbiAgICAgIG5ld1dBRFBvcnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3V0FEUG9ydDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbiAoY3VyU2Vzc2lvbnMpIHtcblxuICAgIHRoaXMub3B0cy5wb3J0ID0gdGhpcy5nZXROZXh0QXZhaWxhYmxlUG9ydChjdXJTZXNzaW9ucyk7XG4gICAgdGhpcy53aW5BcHBEcml2ZXIgPSBuZXcgV2luQXBwRHJpdmVyKHtcbiAgICAgIGFwcDogdGhpcy5vcHRzLmFwcCxcbiAgICAgIHBvcnQ6IHRoaXMub3B0cy5wb3J0XG4gICAgfSk7XG5cbiAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdGFydCgpO1xuICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0YXJ0U2Vzc2lvbih0aGlzLmNhcHMpO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLndpbkFwcERyaXZlci5wcm94eVJlcVJlcy5iaW5kKHRoaXMud2luQXBwRHJpdmVyKTtcbiAgICAvLyBub3cgdGhhdCBldmVyeXRoaW5nIGhhcyBzdGFydGVkIHN1Y2Nlc3NmdWxseSwgdHVybiBvbiBwcm94eWluZyBzbyBhbGxcbiAgICAvLyBzdWJzZXF1ZW50IHNlc3Npb24gcmVxdWVzdHMgZ28gc3RyYWlnaHQgdG8vZnJvbSBXaW5BcHBEcml2ZXJcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnRGVsZXRpbmcgV2luQXBwRHJpdmVyIHNlc3Npb24nKTtcblxuICAgIGlmICh0aGlzLndpbkFwcERyaXZlciAmJiB0aGlzLmp3cFByb3h5QWN0aXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdG9wKCk7XG4gICAgICB0aGlzLndpbkFwcERyaXZlciA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICBhd2FpdCBzdXBlci5kZWxldGVTZXNzaW9uKCk7XG4gIH1cblxuICBwcm94eUFjdGl2ZSAoKSB7XG4gICAgLy8gd2UgYWx3YXlzIGhhdmUgYW4gYWN0aXZlIHByb3h5IHRvIHRoZSBXaW5BcHBEcml2ZXIgc2VydmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjYW5Qcm94eSAoKSB7XG4gICAgLy8gd2UgY2FuIGFsd2F5cyBwcm94eSB0byB0aGUgV2luQXBwRHJpdmVyIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0UHJveHlBdm9pZExpc3QgKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gdGhpcy5qd3BQcm94eUF2b2lkO1xuICB9XG5cbiAgZ2V0IGRyaXZlckRhdGEgKCkge1xuICAgIHJldHVybiB7V0FEUG9ydDogdGhpcy5vcHRzLnBvcnR9O1xuICB9XG59XG5cbmV4cG9ydCB7IFdpbmRvd3NEcml2ZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFdpbmRvd3NEcml2ZXI7XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
