"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emulator = exports.androidTools = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _stream = _interopRequireDefault(require("stream"));

var _fs = _interopRequireDefault(require("fs"));

var _split = _interopRequireDefault(require("split"));

var _os = _interopRequireDefault(require("os"));

var _utils = _interopRequireDefault(require("./utils"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

_bluebird.default.config({
  cancellation: true
});

const log = _appiumSupport.logger.getLogger('android-tools');

const DEFAULT_OPTS = {
  initWait: 15000,
  maxWait: 300000,
  pool: 5000
};
const androidTools = {
  killAll: function () {
    var _killAll = (0, _asyncToGenerator2.default)(function* (processes = ['emulator']) {
      processes = _lodash.default.flatten([processes]);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = processes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const p = _step.value;
          const cmd = process.platform.match(/^win/) ? `powershell -Command "Stop-Process -Name *${p}*"` : `sudo pkill -f ${p}`;
          log.warn(`Killing process with command: ${cmd}`);
          yield _utils.default.exec(cmd).catch(() => {});
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    });

    return function killAll() {
      return _killAll.apply(this, arguments);
    };
  }()
};
exports.androidTools = androidTools;

class Emulator {
  constructor(avd, opts = {}) {
    this.avd = avd;
    this.opts = Object.assign({}, DEFAULT_OPTS, opts);
  }

  start() {
    const out = new _stream.default.PassThrough();
    out.pipe((0, _split.default)()).on('data', line => {
      log.info(line);
    });
    out.pipe(_fs.default.createWriteStream('emulator.log'));
    const emuBin = _os.default.platform() === 'linux' ? 'emulator64-x86' : 'emulator';
    let emuArgs = ['-avd', this.avd, '-no-snapshot-load', '-no-snapshot-save', '-no-audio', '-netfast'];

    if (_os.default.platform() === 'linux') {
      emuArgs = emuArgs.concat(['-qemu', '-m', '512', '-enable-kvm']);
    }

    log.info(`Executing command: ${emuBin} ${emuArgs.join(' ')}`);
    this.child = _utils.default.spawn(emuBin, emuArgs);
    this.child.stdout.pipe(out);
    this.child.stderr.pipe(out);
  }

  waitTillReady() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const startMs = Date.now();
      let timeoutPromise;
      let emuStarted = false;
      let emuErrored = false;
      const procPromise = new _bluebird.default((resolve, reject, onCancel) => {
        _this.child.on('error', err => {
          emuErrored = true;
          reject(`Emulator did not start properly, error: ${err}`);
        });

        _this.child.on('close', () => {
          if (!emuStarted) {
            emuErrored = true;
            reject('Emulator closed too early, see emu logs for errors.');
          }
        });

        onCancel(() => reject(new _bluebird.default.CancellationError()));
      }).catch(_bluebird.default.CancellationError, () => {});

      const _waitForEmu = function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (waitMs = _this.opts.pool) {
          if (waitMs > 0) {
            log.info(`Waiting ${waitMs}ms for emu...`);
            timeoutPromise = new _bluebird.default((resolve, reject, onCancel) => {
              onCancel(() => reject(new _bluebird.default.CancellationError()));
            }).timeout(waitMs);
            yield timeoutPromise.catch(_bluebird.default.Promise.TimeoutError, () => {}).catch(_bluebird.default.Promise.CancellationError, () => {});
          }

          if (emuErrored) {
            throw new Error('Emulator errored');
          }

          if (Date.now() - startMs > _this.opts.maxWait) {
            throw new Error('Emulator did not show up');
          }

          let stdout;

          try {
            var _ref2 = yield _utils.default.exec('adb shell getprop sys.boot_completed');

            var _ref3 = (0, _slicedToArray2.default)(_ref2, 1);

            stdout = _ref3[0];
          } catch (err) {
            if (err.toString().match(/device not found/)) {
              log.warn('Device not found, it should be there, killing adb server.');
              return _utils.default.exec('adb kill-server').then(() => {
                return _waitForEmu();
              });
            } else if (err.toString().match(/device offline/)) {
              return _waitForEmu();
            } else {
              throw err;
            }
          }

          if (stdout && stdout.trim() === '1') {
            log.info('Emulator started');
            emuStarted = true;
          } else {
            yield _waitForEmu();
          }
        });

        return function _waitForEmu() {
          return _ref.apply(this, arguments);
        };
      }();

      yield _bluebird.default.race([_waitForEmu(_this.opts.initWait), procPromise]).finally(() => {
        timeoutPromise.cancel();
        procPromise.cancel();
      });
    })();
  }

  stop() {
    if (this.child) {
      this.child.kill();
    }
  }

}

exports.Emulator = Emulator;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
