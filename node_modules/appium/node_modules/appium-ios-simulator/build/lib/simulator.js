"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-6"));

var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-7"));

var _simulatorXcode3 = _interopRequireDefault(require("./simulator-xcode-7.3"));

var _simulatorXcode4 = _interopRequireDefault(require("./simulator-xcode-8"));

var _simulatorXcode5 = _interopRequireDefault(require("./simulator-xcode-9"));

var _simulatorXcode6 = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _simulatorXcode7 = _interopRequireDefault(require("./simulator-xcode-10"));

var _simulatorXcode8 = _interopRequireDefault(require("./simulator-xcode-11"));

var _utils = require("./utils");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _logger = require("./logger");

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error(`Tried to use an iOS simulator with xcode ` + `version ${xcodeVersion.versionString} but only Xcode version ` + `6.0.0 and up are supported`);
  }
}

async function getSimulator(udid) {
  const xcodeVersion = await _appiumXcode.default.getVersion(true);
  const simulatorInfo = await (0, _utils.getSimulatorInfo)(udid);

  if (!simulatorInfo) {
    throw new Error(`No sim found with udid '${udid}'`);
  }

  (0, _logger.setLoggingPlatform)(simulatorInfo.platform);

  _logger.log.info(`Constructing ${simulatorInfo.platform || 'iOS'} simulator for Xcode version ${xcodeVersion.versionString} ` + `with udid '${udid}'`);

  let SimClass;

  switch (xcodeVersion.major) {
    case 6:
      SimClass = _simulatorXcode.default;
      break;

    case 7:
      if (xcodeVersion.minor < 3) {
        SimClass = _simulatorXcode2.default;
      } else {
        SimClass = _simulatorXcode3.default;
      }

      break;

    case 8:
      SimClass = _simulatorXcode4.default;
      break;

    case 9:
      if (xcodeVersion.minor < 3) {
        SimClass = _simulatorXcode5.default;
      } else {
        SimClass = _simulatorXcode6.default;
      }

      break;

    case 10:
      SimClass = _simulatorXcode7.default;
      break;

    case 11:
      SimClass = _simulatorXcode8.default;
      break;

    default:
      handleUnsupportedXcode(xcodeVersion);
      SimClass = _simulatorXcode6.default;
  }

  return new SimClass(udid, xcodeVersion);
}

async function getDeviceString(opts) {
  let xcodeVersion = await _appiumXcode.default.getVersion(true);
  handleUnsupportedXcode(xcodeVersion);

  _logger.log.info(`Retrieving device name string for Xcode version ${xcodeVersion.versionString}`);

  if (xcodeVersion.major >= 8) {
    return await _simulatorXcode2.default.getDeviceString(opts);
  } else if (xcodeVersion.major === 7) {
    return await _simulatorXcode2.default.getDeviceString(opts);
  } else if (xcodeVersion.major === 6) {
    return await _simulatorXcode.default.getDeviceString(opts);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
